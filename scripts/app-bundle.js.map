{"version":3,"sources":["C:/code/training/aurelia-ioc-factory/src/IDynamic.js","app.ts","ViewFactory.ts","C:/code/training/aurelia-ioc-factory/src/IMyComponent.js","component.ts","environment.ts","guest-one.ts","guest-two.ts","main.ts","root.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":[null,"import { Container, autoinject } from 'aurelia-dependency-injection';\n\nimport { IDynamic } from './IDynamic';\n\n@autoinject()\nexport class App {\n    private router;\n\n    constructor(private container: Container) {\n        // this.container.registerInstance(\"Component\", {\n        //     resource: \"./guest-one\",\n        //     tagName: \"guest-one\"\n        // } as IDynamic);\n\n        this.container.registerInstance(\"Component\", {\n            resource: \"./guest-two\",\n            tagName: \"guest-two\"\n        } as IDynamic);\n    }\n\n    configureRouter(config, router) {\n        this.router = router;\n        config.title = 'Aurelia';\n        config.map([\n            { route: ['', 'root'], name: 'root', moduleId: './root' }\n        ]);\n    }\n}\n","import {\n    autoinject,\n    ViewCompiler,\n    ViewResources,\n    Container,\n    ViewSlot,\n    createOverrideContext\n} from 'aurelia-framework';\n\n/** A custom element Factory */\n@autoinject()\nexport class ViewFactory {\n\n    /**\n     * Creates a new ViewFactory\n     */\n    constructor(private viewCompiler: ViewCompiler, private container: Container) {\n    }\n\n    /**\n     * Compile and insert a new custom element (or plain HTML) to the given container element.\n     * @param containerElement The html container element that will host the new compiled component\n     * @param html The row HTML code to compile (could be plain HTML or aurelia custom element, attribute and so on)\n     * @param viewModel The view model that will be used to bind properties and functions to the new compiled component\n     * @param resources The ViewResources of the new component (the <require from='...'> that must be used to use this component)\n     * @returns A function to call when the gust component should be detached (remove and unbind the gust component)\n     */\n    insert(containerElement: Element, html: string, viewModel: any, resources: ViewResources) {\n        let viewFactory = this.viewCompiler.compile(html, resources);\n        let view = viewFactory.create(this.container);\n        let viewSlot = new ViewSlot(containerElement, true);\n        viewSlot.add(view);\n        view.bind(viewModel, createOverrideContext(viewModel));\n        viewSlot.attached();\n        return () => {\n            viewSlot.remove(view);\n            view.unbind();\n        };\n    }\n}",null,"import { bindable, inlineView, bindingMode, TaskQueue } from 'aurelia-framework';\nimport { Container, autoinject } from 'aurelia-dependency-injection';\nimport { ViewResources, ViewEngine } from 'aurelia-framework';\nimport { ViewFactory } from './ViewFactory';\n\nimport { IDynamic } from './IDynamic';\nimport { IMyComponent } from './IMyComponent';\n\n@inlineView(`<template></template>`)\n@autoinject()\nexport class Component implements IMyComponent {\n\n    /** IMyComponent implementation */\n    @bindable() name = 'Component';\n    @bindable() log: () => void = Function;\n\n    /** The guest's view model reference */\n    @bindable({ defaultBindingMode: bindingMode.twoWay }) public instance: any;\n    /** The guest's view instance (not an HTML Element) */\n    @bindable({ defaultBindingMode: bindingMode.twoWay }) public view: any;\n    /** The guest's HTML Element view */\n    @bindable({ defaultBindingMode: bindingMode.twoWay }) public element: Element;\n\n    /** Called when the data is bound */\n    @bindable() onDatabound: () => void = Function;\n\n    /** The injected guest component information */\n    private dynamic: IDynamic;\n\n    /** Removes the view slot and detach the injected components */\n    private remove: () => void;\n\n    /** Inject required services and resolve 'Component' */\n    constructor(private viewFactory: ViewFactory, private viewEngine: ViewEngine, private viewResources: ViewResources, private host: Element, private taskQueue: TaskQueue) {\n        this.dynamic = Container.instance.get(\"Component\");\n        this.checkResolve();\n    }\n\n    /**\n     * Called by framework\n     */\n    bind() {\n        let template = `\n            <template>\n              <${this.dynamic.tagName} \n                name.two-way=\"name\"\n                log.call=\"log($event)\"\n                view-model.ref=\"instance\"\n                view.ref=\"view\"\n                ref=\"element\"\n              ></${this.dynamic.tagName}>\n            </template>`;\n        return this.viewEngine.importViewResources([this.dynamic.resource], [], this.viewResources).then(viewResources => {\n            this.remove = this.viewFactory.insert(this.host, template, this, viewResources);\n            this.taskQueue.queueMicroTask(this.onDatabound);\n        });\n    }\n\n    /**\n     * Checks that the resolved guest component instance is valid. Throws a TypeError otherwise\n     */\n    private checkResolve() {\n        if (!this.dynamic)\n            throw new TypeError(\"[Component] Trying to resolve a guest component that is not registred\");\n\n        if (!this.dynamic.resource || this.dynamic.resource.length == 0)\n            throw new TypeError(\"[Component] Trying to resolve a guest component that has not a valid resource value\");\n\n        if (!this.dynamic.tagName || this.dynamic.tagName.length == 0)\n            throw new TypeError(\"[Component] Trying to resolve a guest component that has not a valid tag name\");\n    }\n\n    /**\n     * Called by framework when the component is detached from the DOM\n     */\n    detached() {\n        this.remove();\n    }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { bindable, inlineView } from 'aurelia-framework';\n\n/** The interface of main component container */\nimport { IMyComponent } from './IMyComponent';\n\n/**\n * A component thet could be injected in the Component (becouse implements IMyComponent interface)\n */\n@inlineView(`\n  <template>  \n    <p>\n      GuestOne: <input type=\"text\" value.bind=\"name\" />\n      <button click.delegate=\"log({sender:'GuestOne',message:name})\">Greets</button>\n    </p>\n  </template>\n`)\nexport class GuestOne implements IMyComponent {\n\n  @bindable() name = 'GuestOne';\n  /** Once the bind() is done, this function calls the parent one, so the created() is printed here, while other messages are catched from parent log().\n   * But since the parent log() is called with .call=\"log($event)\", future calls must must pass an object instead of two params. \n   */\n  @bindable() log: (...args) => void = (sender: string, message: string) => console.log(`[${sender}] ${message}`);;\n\n  created() {\n    this.log(GuestOne.name, \"created\");\n  }\n\n  bind() {\n    this.log({ sender: 'GuestOne', message: 'bind' });\n  }\n\n  attached() {\n    this.log({ sender: 'GuestOne', message: 'attached' });\n  }\n}\n","import { bindable, inlineView } from 'aurelia-framework';\n\n/** The interface of main component container */\nimport { IMyComponent } from './IMyComponent';\n\n/**\n * A component thet could be injected in the Component (becouse implements IMyComponent interface)\n */\n@inlineView(`\n  <template>  \n    <p>\n      GuestTwo: <input type=\"text\" value.bind=\"name\" />\n      <button click.delegate=\"log({sender:'GuestTwo',message:name})\">Greets</button>\n    </p>\n  </template>\n`)\nexport class GuestTwo implements IMyComponent {\n\n  @bindable() name = 'GuestTwo';\n  /** Once the bind() is done, this function calls the parent one, so the created() is printed here, while other messages are catched from parent log().\n   * But since the parent log() is called with .call=\"log($event)\", future calls must must pass an object instead of two params. \n   */\n  @bindable() log: (...args) => void = (sender: string, message: string) => console.log(`[${sender}] ${message}`);;\n\n  created() {\n    this.log(GuestTwo.name, \"created\");\n  }\n\n  bind() {\n    this.log({ sender: 'GuestTwo', message: 'bind' });\n  }\n\n  attached() {\n    this.log({ sender: 'GuestTwo', message: 'attached' });\n  }\n}\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n    aurelia.use\n        .standardConfiguration();\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { viewResources } from 'aurelia-framework';\n\nimport { IMyComponent } from './IMyComponent';\n\n@viewResources(\"./component\")\nexport class Root {\n    name = 'Root';\n\n    private history: string = 'Look at console for more info...<br/>';\n\n\n    private viewModel: IMyComponent;\n\n    private log(sender: string, message: string) {\n        console.log(`[${sender}] ${message}`);\n        this.history += `[${sender}] ${message}<br/>`;\n    }\n\n    init() {\n        console.log(\"Root init\", this.viewModel);\n    }\n}\n"],"sourceRoot":"../src"}